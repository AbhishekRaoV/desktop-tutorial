 k get  deployment.apps/devlake-lake -n devlake -o yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "1"
    meta.helm.sh/release-name: devlake
    meta.helm.sh/release-namespace: devlake
  creationTimestamp: "2024-04-01T07:31:56Z"
  generation: 1
  labels:
    app.kubernetes.io/instance: devlake
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: devlake
    app.kubernetes.io/version: v1.0-beta1
    helm.sh/chart: devlake-1.0-beta1
  name: devlake-lake
  namespace: devlake
  resourceVersion: "2912402"
  uid: 8ec5e4c7-7e59-4f25-8c00-c9f9412bbe43
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/instance: devlake
      app.kubernetes.io/name: devlake
      devlakeComponent: lake
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app.kubernetes.io/instance: devlake
        app.kubernetes.io/name: devlake
        devlakeComponent: lake
    spec:
      containers:
      - env:
        - name: PORT
          value: "8080"
        - name: API_REQUESTS_PER_HOUR
          value: "10000"
        - name: API_RETRY
          value: "3"
        - name: API_TIMEOUT
          value: 120s
        - name: IN_SECURE_SKIP_VERIFY
          value: "false"
        - name: LOGGING_DIR
          value: /app/logs
        - name: LOGGING_LEVEL
          value: info
        - name: PIPELINE_MAX_PARALLEL
          value: "1"
        - name: TZ
          value: UTC
        envFrom:
        - secretRef:
            name: devlake-mysql-auth
        - secretRef:
            name: devlake-encryption-secret
        image: devlake.docker.scarf.sh/apache/devlake:v1.0-beta1
        imagePullPolicy: Always
        livenessProbe:
          failureThreshold: 5
          httpGet:
            path: /ping
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 5
        name: lake
        ports:
        - containerPort: 8080
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /ping
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 5
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      initContainers:
      - command:
        - sh
        - -c
        - |
          until nc -z -w 2 devlake-mysql 3306 ; do
            echo wait for database ready ...
            sleep 2
          done
          echo database is ready
        image: alpine:3.16
        imagePullPolicy: IfNotPresent
        name: waiting-database-ready
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
status:
  conditions:
  - lastTransitionTime: "2024-04-01T07:31:56Z"
    lastUpdateTime: "2024-04-01T07:31:56Z"
    message: Deployment does not have minimum availability.
    reason: MinimumReplicasUnavailable
    status: "False"
    type: Available
  - lastTransitionTime: "2024-04-01T07:41:57Z"
    lastUpdateTime: "2024-04-01T07:41:57Z"
    message: ReplicaSet "devlake-lake-68f98c76f4" has timed out progressing.
    reason: ProgressDeadlineExceeded
    status: "False"
    type: Progressing
  observedGeneration: 1
  replicas: 1
  unavailableReplicas: 1
  updatedReplicas: 1
